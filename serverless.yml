service: sqs
frameworkVersion: "3"
plugins:
  - serverless-webpack
useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps --stack-trace-limit=1000
    SQS_URL: { Ref: SQSQueue }
    DB_HOST: ${env:DB_HOST}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB: ${env:DB}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - sqs:*
        - ec2:*
      Resource: "*"

functions:
    placeOrder:
      handler: src/functions/placeOrder/handler.main
      timeout: 60
      events:
        - http:
            path: /placeOrder
            method: post
            cors: true

    processSQSMessageBatch:
      handler: src/functions/processSQSMessageBatch/handler.main
      events:
        - sqs:
            arn: 
              Fn::GetAtt:
                - SQSQueue
                - Arn
            batchSize: 100
            maximumBatchingWindow: 1

    getStatistic:
      handler: src/functions/getStatistic/handler.main
      events:
        - http:
            path: /getStatistic
            method: get
            cors: true

# package:
#   individually: true
custom:
  sqsName: order-sqs-queue
  webpack:
    webpackConfig: webpack.config.ts
    includeModules: true
    packager: npm

resources:
 Resources:
   SQSQueue:
     Type: AWS::SQS::Queue
     Properties:
       QueueName: ${self:custom.sqsName}